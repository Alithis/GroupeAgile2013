@model IEnumerable<NoteTaLoc.Models.AdresseTable>

<script type="text/javascript">

    var carte;
    var arrlong  = [];
    var arrlatt  = [];
    var bounds;

    $(document).ready(function () {
        initialiser();

        $(".note").click(function () {
            var point = fctPoint($(this).find("#item_Lattitude").val(), $(this).find("#item_Longitude").val());
            carte.panTo(point); //'=== deplacement smooth
        });

//Pour la gestion d'interface du tableau et du comportement du cursor
             $('.note')
            .click(function () {
                //$(this).parent().find('note_selected').each(function (index, element) {
                //    $(element).removeClass('note_selected'); //Retire la selection précédente
                $(".note_selected").removeClass('note_selected');
                //});
                $(this).addClass('note_selected'); //Ajoute la nouvel sélection
            })
            .hover(
            //=== Lors du passage de la souris sur la ligne on applique la classe RowSelection
            //=== Lorsque la souris est a l'exterieur de la ligne la classe RowSelection est retiré
                function () { $(this).addClass("note_hover").css('cursor', 'pointer'); },
                function () { $(this).removeClass("note_hover"); }
            );

    });

    var initialiser = function () {
        var options = {
            //center:  new google.maps.LatLng(45.30, -73.35),
            //zoom: 2,
            mapTypeId: google.maps.MapTypeId.ROADMAP
        };
        bounds = new google.maps.LatLngBounds(null);
        carte = new google.maps.Map(document.getElementById("map_canvas"), options);

        //Positionne montreal par defaut
        //var point = fctPoint('45.30', '-73.35');
        //carte.panTo(point); //'=== deplacement smooth
        //bounds.extend(point);


        for (i = 0; i < arrlong.length; i++) {
            fctSetMarqueur(arrlatt[i], arrlong[i]);
        }
       carte.fitBounds(bounds);
       carte.panToBounds(bounds);
    }

    var fctSetMarqueur = function (plngLat, plngLgt) {
        var point = fctPoint(plngLat, plngLgt)
        bounds.extend(point);
        var marqueur = new google.maps.Marker({
            position: point,
            map: carte });

        var infowindow = new google.maps.InfoWindow();

        google.maps.event.addListener(marqueur, 'click', function() {
            window.open('', '_blank');
        });
    }

    var fctPoint = function (plngLat, plngLgt) {
        var lngLgt = parseFloat(plngLgt.replace(',', '.').replace(' ', ''));
        var lngLat = parseFloat(plngLat.replace(',', '.').replace(' ', ''));
        var point = new google.maps.LatLng(lngLat, lngLgt);

        return point;
    }


</script>


<style>

.map_canvas
{
    width: 60%;
    height: 400px;
    float: left;
    margin-right: 10px;
}

.search_result
{
    width: 20%;
    height: 400px;
    float: right;
    margin-left: 2px;
}
.note, .note_hover, .note_seleted
{
 border: 1px solid gray;
}

.note_hover
{
    background-color: #00ace8;
}

.note_selected
{
    background-color: #9ecf35;
}


</style>

@using (Html.BeginForm("SearchNoted", "AdresseTable"))
{
    <div style="text-align : center;" class="form-horizontal">
    @Html.TextBox("searchString")
            @* <input type="button" id="btnSearch" value="Rechercher" onclick="location.href = '@Url.Action("SearchNoted", "AdresseTable")'"/>*@
        <input type="submit" id="btnSearch" class="btn btn-primary"  value="Rechercher" />
    </div>
    <br />

    <div style="background: rgba(255, 255, 255, 0.73); border-radius: 8px 8px 8px 8px; padding: 10px 10px; width: auto; height: auto; min-height: 400px; margin:auto;">

    <div id="map_canvas"  class="map_canvas"></div>
    <div id="seach_result"  class="seach_result">
        <fieldset class="seach_result">
        @{
            int counter = 0;
        }
        <table>
            <tr><th>Adresse</th><th>Note</th></tr>
            @foreach (var item in Model)
            {
                <tr class="note" id="note_@counter">
                    <td>@Html.DisplayFor(model => item.AdresseLine)</td>
                    <td>@Html.DisplayFor(model => item.AvgNote)
                        <script>
                            arrlong[@(counter)] = '@item.Longitude';
                            arrlatt[@(counter)] = '@item.Lattitude';
                        </script>
                        @Html.HiddenFor(model => item.Longitude)
                        @Html.HiddenFor(model => item.Lattitude)
                        </td>
                </tr>

                @*        @Html.DisplayFor(model => item.RueNo)&nbsp;
                @Html.DisplayFor(model => item.Rue)

                @(string.IsNullOrEmpty(item.AptNo) ? "" : "App." + Html.DisplayFor(model => item.AptNo) + ",");

                @Html.DisplayFor(model => item.Ville),
                @Html.DisplayFor(model => item.Province),
                @Html.DisplayFor(model => item.Pays)<br />*@


                counter++;
            }
        </table>
        </fieldset>
    </div></div>
}